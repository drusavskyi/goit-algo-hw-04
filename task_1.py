import os
import shutil
import argparse
from pathlib import Path

def copy_and_sort_files(source_dir: Path, dest_dir: Path):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —Ñ–∞–π–ª–∏ —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —É source_dir,
    –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª–∏ —É dest_dir —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø—ñ–¥—Ç–µ–∫–∏ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º.
    """
    try:
        for item in source_dir.iterdir():
            if item.is_dir():
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–∫–∞—Ç–∞–ª–æ–≥—ñ–≤
                copy_and_sort_files(item, dest_dir)
            elif item.is_file():
                # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É (–±–µ–∑ –∫—Ä–∞–ø–∫–∏), –∞–±–æ "no_extension"
                ext = item.suffix[1:].lower() or "no_extension"
                target_subdir = dest_dir / ext

                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–∞–ª–æ–≥—É, —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î
                target_subdir.mkdir(parents=True, exist_ok=True)

                try:
                    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
                    shutil.copy2(item, target_subdir / item.name)
                except PermissionError:
                    print(f"‚ùå Permission denied: {item}")
                except Exception as e:
                    print(f"‚ùå Error copying {item}: {e}")
    except FileNotFoundError:
        print(f"‚ùå Directory not found: {source_dir}")
    except Exception as e:
        print(f"‚ùå Error accessing {source_dir}: {e}")

def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(
        description="Recursively sort and copy files by extension."
    )
    parser.add_argument(
        "source", type=str, help="Source directory"
    )
    parser.add_argument(
        "destination", type=str, nargs="?", default="dist",
        help="Destination directory (default: dist)"
    )
    args = parser.parse_args()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–∏—Ö —à–ª—è—Ö—ñ–≤
    source_path = Path(args.source).resolve()
    destination_path = Path(args.destination).resolve()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –≤–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î
    if not source_path.exists() or not source_path.is_dir():
        print(f"‚ùå Source directory does not exist or is not a directory: {source_path}")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (—è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
    destination_path.mkdir(parents=True, exist_ok=True)

    print(f"üîÑ Processing files from {source_path} to {destination_path}...")
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    copy_and_sort_files(source_path, destination_path)

    print("‚úÖ All files have been sorted and copied successfully.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ –ø—Ä–æ–≥—Ä–∞–º—É
if __name__ == "__main__":
    main()
